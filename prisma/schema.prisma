generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())

  enrollments Enrollment[]
  progresses  Progress[]
  comments    Comment[]
  favorites   Favorite[]
  completions CourseCompletion[]
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  courses Course[]
}

model Course {
  id          Int        @id @default(autoincrement())
  title       String
  slug        String     @unique
  description String
  thumbnail   String
  youWillLearn   String[]
  requirements   String[] 
  createdAt   DateTime   @default(now())

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  sections     Section[]
  enrollments  Enrollment[]
  favorites    Favorite[]
  completions  CourseCompletion[]
  //comments    Comment[]
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  joinedAt  DateTime @default(now())

  @@unique([userId, courseId])
}

model Section {
  id        Int      @id @default(autoincrement())
  title     String
  order     Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int

  lessons   Lesson[]
}

model Lesson {
  id         Int      @id @default(autoincrement())
  title      String
  contentUrl String
  order      Int
  section    Section  @relation(fields: [sectionId], references: [id])
  sectionId  Int
  duration   Int ?
  progresses Progress[]
  quizzes    Quiz[]
  comments   Comment[] 
}


model Progress {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  lesson       Lesson    @relation(fields: [lessonId], references: [id])
  lessonId     Int
  percentage   Float     // từ 0 đến 1.0 (100%)
  lastViewedAt DateTime? // thời gian xem gần nhất
  updatedAt    DateTime  @updatedAt

  @@unique([userId, lessonId])
}

model CourseCompletion {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    Int
  completedAt DateTime @default(now())

  @@unique([userId, courseId])
}

model Quiz {
  id        Int      @id @default(autoincrement())
  question  String
  type      QuizType
  options   Json?
  answer    Json
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  Int
}

enum QuizType {
  FILL      
  SINGLE_CHOICE 
  MULTI_CHOICE  
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int

  @@unique([userId, courseId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  Int
  createdAt DateTime @default(now())
}
enum Role {
  ADMIN
  USER
}
